{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "MeLan",
    "repository": {
        "command.curly.inline": {
			"name": "command.melan",
			"match": "(\\\\)(\\w+:)*(\\w+)((?'bo'\\().*(?'eo'\\)))?((?'bb'\\{).*(?'eb'\\}))?",
			"captures": {
				"1": { "name": "keyword.operator.function.melan" },
				"2": { "name": "entity.name.tag.melan" },
				"3": { "name": "entity.name.function.melan" },
				"bo": { "name": "punctuation.optgroup.begin.melan" },
				"eo": { "name": "punctuation.optgroup.end.melan" },
				"bb": { "name": "punctuation.body.begin.melan" },
				"eb": { "name": "punctuation.body.end.melan" },
				"4": {
					"patterns": [
						{ "include": "#option" }
					]
				},
				"5": {
					"patterns": [
						{"include": "#escape.curly"},
						{"include": "#variable"},
						{"include": "#command.inline"}
					]
				}
			}
		},
		"body.square.inline": {
			"name": "command.body.melan",
			"match": "(?<=\\w|\\))(\\[)(.*?)(\\])",
			"captures": {
				"1": { "name": "keyword.other.body.begin.melan" },
				"2": {
					"patterns": [
						{ "include": "#escape.square" } 
					]
				},
				"3": { "name": "keyword.other.body.end.melan" }
			},
			"comment": "TODO: add \\G to the match expression when VSCode supports it."
		},
		"command.angle.inline": {
			"name": "command.melan",
			"match": "(\\\\)(\\w+:)*(\\w+)((?'bo'\\().*(?'eo'\\)))?((?'bb'<\\[).*(?'eb'\\]>))?",
			"captures": {
				"1": { "name": "keyword.operator.function.melan" },
				"2": { "name": "entity.name.tag.melan" },
				"3": { "name": "entity.name.function.melan" },
				"bo": { "name": "punctuation.optgroup.begin.melan" },
				"eo": { "name": "punctuation.optgroup.end.melan" },
				"bb": { "name": "punctuation.body.begin.melan" },
				"eb": { "name": "punctuation.body.end.melan" },
				"4": {
					"patterns": [
						{ "include": "#option" }
					]
				}
			}
		},
        "command.long": {
			"name": "command.melan",
			"contentName": "command.option.melan",
			"begin": "(\\\\)(\\w+:)*(\\w+)(\\()",
			"end": "(\\))",
			"beginCaptures": {
				"1": { "name": "keyword.operator.function.melan" },
				"2": { "name": "entity.name.tag.melan" },
				"3": { "name": "entity.name.function.melan" },
				"4": { "name": "punctuation.optgroup.begin.melan" }
			},
			"endCaptures": {
				"1": { "name": "punctuation.optgroup.end.melan" }
			},
			"patterns": [
				{ "include": "#option" }
			],
			"comment": "Unfortunately there is no way to match command + options + body across multiple lines. So bodies are matched separately using suboptimal patterns which might give false positives."
        },
        "optgroup": {
			"name": "optgroup.melan",
			"match": "\\G?(\\()(.*)(\\))",
			"captures": {
				"1": { "name": "punctuation.optgroup.begin.melan" },
				"2": { "patterns": [{ "include": "#option" }] },
				"3": { "name": "punctuation.optgroup.begin.melan" }
			}
		},
		"body.curly.inline": {
			"name": "command.body.melan",
			"match": "(?<=\\w|\\))(\\{)(.*)(\\})",
			"captures": {
				"2": {
					"patterns": [{
						"name": "constant.character.escape",
						"match": "\\\\[\\\\#${}]"
					}]
				}
			}
		},
		"body.square.inline": {
			"name": "command.body.melan",
			"match": "(?<=\\w|\\))(\\[)(.*)(\\])",
			"captures": {
				"2": {
					"patterns": [{
						"name": "constant.character.escape",
						"match": "\\\\[\\[\\]]"
					}]
				}
			}
		},
		"body.curly.multiline": {
			"name": "command.body.melan",
			"begin": "(?<=\\w|\\))(\\{)\\s*(#|$)",
			"end": "^\\s*(})$",
			"beginCaptures": {
				"1": { "name": "punctuation.body.begin.melan" }
			},
			"endCaptures": {
				"1": { "name": "punctuation.body.end.melan" }
			},
			"patterns": [
				{ "include": "#comment" },
				{ "include": "#command.long" },
				{ "include": "#command.short" },
				{ "include": "#body.curly" },
				{ "include": "#body.square" },
				{ "include": "#body.angle" }
			]
		},
		"body.square.multiline": {
			"name": "command.body.melan",
			"begin": "(?<=\\w|\\))(\\[)",
			"end": "(])",
			"beginCaptures": {
				"1": { "name": "punctuation.body.begin.melan" }
			},
			"endCaptures": {
				"1": { "name": "punctuation.body.end.melan" }
			},
			"patterns": [{ 
				"name": "constant.character.escape.melan",
				"match": "\\\\]" 
			}]
		},
		"body.angle": {
			"name": "command.body.melan",
			"begin": "(?<=\\w|\\))(<\\[)",
			"end": "(]>)",
			"beginCaptures": {
				"1": { "name": "punctuation.body.begin.melan" }
			},
			"endCaptures": {
				"1": { "name": "punctuation.body.end.melan" }
			}
		}
    }
}